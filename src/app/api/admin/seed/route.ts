import { NextResponse } from "next/server";
import { cookies } from "next/headers";
import { createRouteHandlerClient } from "@supabase/auth-helpers-nextjs";
import { supabaseAdmin } from "@/lib/supabaseAdmin";

export async function POST() {
  const supabase = createRouteHandlerClient({ cookies });
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  const { data: me } = await supabase.from('profiles').select('role').eq('id', user.id).single();
  if (me?.role !== 'admin') return NextResponse.json({ error: 'Forbidden' }, { status: 403 });

  // Create real auth users (id is generated by Supabase Auth)
  const verifiedAuth = await supabaseAdmin.auth.admin.createUser({
    email: 'verified@clubjet.com',
    password: 'Test1234!',
    email_confirm: true,
    user_metadata: { seed: true }
  });
  const pendingAuth = await supabaseAdmin.auth.admin.createUser({
    email: 'pending@clubjet.com',
    password: 'Test1234!',
    email_confirm: true,
    user_metadata: { seed: true }
  });
  const verifiedId = verifiedAuth.data.user?.id;
  const pendingId = pendingAuth.data.user?.id;
  if (!verifiedId || !pendingId) return NextResponse.json({ error: 'Failed to create auth users' }, { status: 500 });

  // Upsert profiles with those auth IDs
  const { error: ep } = await supabase.from('profiles').upsert([
    { id: verifiedId, email: 'verified@clubjet.com', first_name: 'Veri', last_name: 'Fied', role: 'user', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
    { id: pendingId, email: 'pending@clubjet.com', first_name: 'Pen', last_name: 'Ding', role: 'pending', created_at: new Date().toISOString(), updated_at: new Date().toISOString() },
  ]);
  if (ep) return NextResponse.json({ error: ep.message }, { status: 500 });

  // Create accounts for verified user: LENDER and NETWORK with sample balances
  const { error: ea } = await supabase.from('accounts').insert([
    { id: crypto.randomUUID(), user_id: verifiedId, type: 'LENDER', balance: 25000, created_at: new Date().toISOString() },
    { id: crypto.randomUUID(), user_id: verifiedId, type: 'NETWORK', balance: 5400, created_at: new Date().toISOString() },
  ]);
  if (ea) return NextResponse.json({ error: ea.message }, { status: 500 });

  return NextResponse.json({ ok: true, verifiedId, pendingId });
}

